# -*- coding: utf-8 -*-
"""MLOps_Wine_Quality.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1cJg3PyHi8XqfxTpFKir9-eAgqMtIwxXr

#                       DATADUDE[SAAD KHAN]

# MLOps

<img data-ils="4" jsaction="rcuQ6b:trigger.M8vzZb;" class="rg_i Q4LuWd" jsname="Q4LuWd" width="392" height="130" alt="ML Ops: Machine Learning Operations" src="https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcSIuAc5HoXRJxb0l7yKepV_v6n2bHurVxp7ww&amp;usqp=CAU">

$Step-1$: **Install required packages**

here our required package is mlflow
"""

!pip install mlflow

!mlflow

!mlflow --version

"""$Step-2$: **Import required packages**

- Pandas : to read and analysis of the data

- Numpy: For the numerical analysis/ some mathamatical formulae

- Sklearn: sikit-learn for ML development

- mlflow
"""

import numpy as np
import pandas as pd
from sklearn.linear_model import ElasticNet  # ML model
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_absolute_error,mean_squared_error,r2_score
import mlflow
import mlflow.sklearn

"""$Step-3$: **Read the data**"""

# Here we are taking wine quality dataset
# It is a regression data set
# This data set is available in kaggle as wela as in UCI website
data=pd.read_csv('/content/winequality_red.csv')
data.head()

#data.dropna

data.columns

data.shape
# we have 12 columns
# In that 11 columns are input columns ==================== > X
# 1 column: Quality is output column( Target features) ===== > y
# The total number of observations are 1599

data.info()

data.isnull().sum()

"""$Step-4$:

**Develop ML model using MLflow**

- we need to divide data into two parts train_data  and test_data

- both train_data and test_data includes input columns(X) and output columns(y)

- Next we divide train_data to X_train and y_train

- Next we divide test_data to X_test and y_test

- Model will be developed on train data

- Model predictions happen on X_test data that is called y_predictions

- Finally we compare y_test with y_predictions
"""

# Start our mlflow here
# Mlflow will create some default experiments, our models will deploy in that experiment

mlflow.set_experiment("/mlflow/naresh_it")
# all the logs
# all the deployments
# will save in this folder  "mlflow/naresh_it"
# artifacts
# content/mlruns/254997122522303723

print(mlflow.set_experiment("/mlflow/saadkhan").experiment_id)
print(mlflow.set_experiment("/mlflow/saadkhan").name)
print(mlflow.set_experiment("/mlflow/saadkhan").lifecycle_stage)
print(mlflow.set_experiment("/mlflow/saadkhan").artifact_location)

# yaml files configuration files

train,test=train_test_split(data,test_size=0.3,random_state=1234)

# test size=0.3 means train data is 70% and test data =30%
# random state gives random observations

train_x=train.drop(['quality'],axis=1)  # we are droping qulaity column
train_y= train[['quality']]
test_x=test.drop(['quality'],axis=1)
test_y=test[['quality']]

train.shape,test.shape

train_x.shape,test_x.shape

train_y.shape,test_y.shape

from mlflow.entities.model_registry import registered_model
#from atexit import register
def train_model(alpha,l1_ratio):
    #==============Develop train test data======================================
    train,test=train_test_split(data,
                                test_size=0.3,
                                random_state=1234)
    train_x=train.drop(['quality'],axis=1)  # we are droping qulaity column
    train_y= train[['quality']]
    test_x=test.drop(['quality'],axis=1)
    test_y=test[['quality']]

    #====== Now initiate MLflow run==================================
    with mlflow.start_run(experiment_id=168934479190679116,
                          run_name='regression',
                          description='Performing regression model'):

        #========== Model building==================================
        lr=ElasticNet(alpha=alpha,l1_ratio=l1_ratio)
        lr.fit(train_x,train_y)

        #========== Model prediction=================================
        predicted_data= lr.predict(test_x)

        # ========= Model evaluation================================
        rmse=np.sqrt(mean_squared_error(test_y,predicted_data))
        mae=mean_absolute_error(test_y,predicted_data)
        r2=r2_score(test_y,predicted_data)

        print("rmse:",rmse)
        print("mae:",mae)
        print("r2_score:",r2)

        #=============Log the metrics, parameters,and model========================
        mlflow.log_param("alpha",alpha)
        mlflow.log_param("l1_ratio",l1_ratio)

        mlflow.log_metric("RMSE",rmse)
        mlflow.log_metric("MAE",mae)
        mlflow.log_metric("R2",r2)

        mlflow.sklearn.log_model(lr,"model",registered_model_name="ElasticNet")

train_model(0.3,0.4)

# In the name of Elastic model
# we ran two times:  a new version

"""$Step-5$: **Connect with MLflow UI**"""

# Now we need to see all artifacts in mlflow UI
# For this will use  ngrok

!pip install pyngrok

from pyngrok import ngrok
ngrok_tunnel= ngrok.connect(addr='5000',proto="http")
print("Tracking uri:",ngrok_tunnel.public_url)

!mlflow ui
# trigger this first
# then open url

# 2hBhb2tVKvPLkF24ACLI7ULAnkT_77nT4dmo24Hu28Tpf4U3h

"""<div class="ant-col ant-col-sm-24 ant-col-lg-18 ant-col-xl-13"><h1 class="ant-typography" id="authtoken">Your Authtoken</h1><p class="cH1zG6wWq9mZVCFSudL9 _rz65p6nhEbCQ5T8181l">This is your personal Authtoken. Use this to authenticate the ngrok agent that you downloaded.</p><div class="ant-row" style="margin-left: -4px; margin-right: -4px; row-gap: 0px;"><div class="ant-col" style="padding-left: 4px; padding-right: 4px; flex: 1 1 auto;"><input class="ant-input" readonly="" type="text" value="2KVWElPAg1tzrBVnxmFFYaxfeyg_2cCYD9fH3HpMqU1u5TEsC"></div><div class="ant-col" style="padding-left: 4px; padding-right: 4px;"><button data-clipboard-text="2KVWElPAg1tzrBVnxmFFYaxfeyg_2cCYD9fH3HpMqU1u5TEsC" type="button" class="ant-btn ant-btn-primary"><span role="img" aria-label="copy" class="anticon anticon-copy"><svg viewBox="64 64 896 896" focusable="false" data-icon="copy" width="1em" height="1em" fill="currentColor" aria-hidden="true"><path d="M832 64H296c-4.4 0-8 3.6-8 8v56c0 4.4 3.6 8 8 8h496v688c0 4.4 3.6 8 8 8h56c4.4 0 8-3.6 8-8V96c0-17.7-14.3-32-32-32zM704 192H192c-17.7 0-32 14.3-32 32v530.7c0 8.5 3.4 16.6 9.4 22.6l173.3 173.3c2.2 2.2 4.7 4 7.4 5.5v1.9h4.2c3.5 1.3 7.2 2 11 2H704c17.7 0 32-14.3 32-32V224c0-17.7-14.3-32-32-32zM382 896h-.2L232 746.2v-.2h150v150z"></path></svg></span><span>Copy</span></button></div></div></div>"""

from pyngrok import ngrok
ngrok.kill()

from pyngrok import ngrok
ngrok.kill()  # It will kill the already established tunnels

auth_code='2hBhb2tVKvPLkF24ACLI7ULAnkT_77nT4dmo24Hu28Tpf4U3h'
ngrok.set_auth_token(auth_code)


ngrok_tunnel= ngrok.connect(addr='5000',proto="http")
print("Tracking uri:",ngrok_tunnel.public_url)

import mlflow
logged_model = 'runs:/874b3cc09f94469ca678ca2b2e1a9cce/model'

# Load model as a PyFuncModel.
loaded_model = mlflow.pyfunc.load_model(logged_model)

# Predict on a Pandas DataFrame.
import pandas as pd
loaded_model.predict(pd.DataFrame(test_x))

